---
title: Reproducible workflows in R
subtitle: King's Open Research Summer School
author:
  - name: Dr Ewan Carr
    orcid: 0000-0002-1146-4922
    affiliation:
      - name: Department of Biostatistics & Health Informatics<br>King’s College London
        city: King’s College London
date: 2025-07-25
date-format: "long"
from: markdown+emoji
format:
  revealjs:
    theme: [simple, theme.scss]
    template-partials:
      - title-slide.html
    css: theme.css
    output-file: index.html
    highlight-style: atom-one
    code-line-numbers: false
    echo: true
    slide-number: true
---

## 🖼️

* My aim is to surface key tools and habits — you’ll need to explore further on
  your own.

* Reproducibility is *necessary* for open science, but not *sufficient*.
  Broader change in motivations, incentives, and culture is essential.

<div style="
border: 3px solid #ccc;
padding: 1.5rem;
padding-bottom: 0.5rem;
border-radius: 10px;
background-color: #f9f9f9;
margin-top: 0.5rem;
padding-left: 3rem;
font-size: 2rem;
">

  * Reset academic publishing models.
  * Reward high quality team science regardless of null findings.
  * Stop chasing small, noisy effects in tiny samples.

</div>

## {.center}

<div style="border-radius: 4px; border: 6px solid #999; background: #f9f9f9; padding: 1.5rem 1.5rem 2rem 2rem; font-family: Optima, Georgia, serif; font-size: 4rem; line-height: 1.5; margin: 1rem auto 1rem auto;">
  "Research can be <strong>open</strong> and <strong>reproducible</strong> and still completely and obviously <strong>wrong</strong>."
</div>

<div style="text-align: right; font-size: 3rem; font-style: italic; margin-top: 1.5rem;">
  — Richard McElreath
  <div><a href="https://elevanth.org/blog/2025/07/09/which-kind-of-science-reform" style="font-size: 1.7rem; text-decoration: none;">Which Kind of Science Reform</a></div>
</div>

##

![](images/maslow-comic-1.png){fig-align="center"}

##

![](images/maslow-comic-2.png){fig-align="center"}

## This talk


:::: {.columns}

::: {.column width="60%" style="padding-left: 1rem;"}
1. Code and data hygiene
2. Version control with Git
3. Managing your environment
4. Workflow automation
5. Wrap-up
:::

::: {.column width="40%"}

![](images/signpost.png){fig-align="right" width="80%"}
:::

::::

# 🫣<br><br>Not doing horrible things with your data or code {background-color="#3a488c"}

## 🧼 Data hygiene

:::{style="margin-left: 1.5em;"}

1. Keep raw and processed separate
2. Never edit raw data; automate instead.
   - Avoid `final_final_v3.csv`
3. Set raw data as read only
4. Version your data
   - e.g., `data/raw/YYYY-MM-DD`
5. Back up regularly; test your backups.

:::

## 🗂️ Consistent project layout {.center .smaller}

:::: {.columns .v-center-container}

::: {.column width="30%" style="font-size: 3rem; padding-left: 5rem; padding: 3rem;"}
```text
├── data
│   ├── raw
│   └── clean
├── 1-cleaning
├── 2-analysis
│   ├── a-descriptives
│   ├── b-models
│   └── c-processing
├── 3-figures
├── 4-writing
└── README.txt
```
:::

::: {.column width="40%"}

![](images/github-structure.png){style="padding-bottom: 2rem;"}
:::

::::

::: {.center-h}
[`https://cookiecutter-data-science.drivendata.org`](https://cookiecutter-data-science.drivendata.org)
:::

# Use relative file paths {.center}

::: {.fragment}

::: {.r-fit-text}
`setwd()` is banned
:::

:::

## {.center}

:::{.r-fit-text}
🧨 Absolute file paths are **brittle**.
:::

<br>

::: {.fragment}
:::{.r-fit-text}
🎒 Relative file paths are **portable**.
:::
:::

## Use [**here**](https://here.r-lib.org/index.html) for relative paths {.center}

<div style="border: 2px solid #ccc; padding: 2rem; border-radius: 8px; background-color: #f9f9f9; padding-top: 1rem; padding-bottom: 0.2rem;">

Set a project root (i.e., a top-level directory) from:

* An RStudio project
* A Git repository
* Manually (with a `.here` file)

Then, construct **relative paths** with `here()`:

```{r}
#| eval: false
#| echo: true
library(here)
data <- read_csv(
  here("data", "raw", "messy-data.csv")
)
```
</div>

## {.center}

::: {.center-h}
This works well with RStudio projects.
:::

![](images/rstudio-projects.png){fig-align="center"}

## {.center}

::: {.r-fit-text}
[https://cran.r-project.org/web/packages/here/vignettes/here.html](https://cran.r-project.org/web/packages/here/vignettes/here.html)
:::

## 🧹 Write clean, organised code

* Write **modular code**; break tasks into functions or scripts (e.g., scripts cleaning, analysis, visualisation).

* Follow a **style guide**^[https://style.tidyverse.org/] and use a **code formatter**^[https://posit-dev.github.io/air/].

* Document with inline comments and `README.md` files.

* Use consistent file and variable naming conventions (e.g., `snake_case`).

## The Air code formatter^[[https://posit-dev.github.io/air/](https://posit-dev.github.io/air/)] {.center}

![](images/air.gif){fig-align="center" width="60%" style="padding-bottom:1em;"}

# 🔁<br><br>Version control{background-color="#3a488c"}

##

:::{.r-fit-text}
Use git.
:::

## How does it work?

Initialise the repository:
```{.bash}
git init
git add README.md cleaning.R
git commit -m "Initial commit"
```

<br>
Then on [GitHub](https://github.com), create a new repository and
connect the remote repository to your local one:

```{.bash}
git remote add origin \
  https://github.com/your-username/your-repo.git
```

##

Push your changes to GitHub
```{.bash}
git push origin main
```

<br>
Then, repeat:

```{.bash style="padding-left: 10px; margin-bottom: 15px;"}
git add . # <1>
git commit -m "Describe your changes" # <2>
git push # <3>
```
1. Add recent changes
2. 'Commit' them to the local repository
3. 'Push' them to GitHub

## {background-color="#1a1c1a"}

![](images/gource.gif)

## Getting started

1. Create an account on [GitHub.com](https://github.com)

2. Download [GitHub Desktop](https://desktop.github.com/download/)

3. Add some files. Press buttons, break things.

![](images/papers.gif){fig-align="center"}

## {.center}

:::{.r-fit-text}
KEEP BACKUPS
:::

## Include a `README.md` file {.center}

A good `README.md` helps others (and your future self) understand your project.

- What and who is the project for?
- Describe the folder structure and key files.
- Step-by-step instructions, including software dependencies and steps to
  reproduce.

::: {.center-h}
<https://www.makeareadme.com>
:::

## {.center}

::: {.center-h}
<https://github.com/ewancarr/NEWS2-COVID-19>
:::

![](images/readme.png){fig-align="center"}

## What to learn next?

<ul style="list-style: none; padding-left: 0;">
  <li style="display: flex; align-items: start; gap: 0.5em;">
    <span>📄</span> <span>Using <code>.gitignore</code> effectively</span>
  </li>
  <li style="display: flex; align-items: start; gap: 0.5em;">
    <span>✍️</span> <span>Writing good commit messages</span>
  </li>
  <li style="display: flex; align-items: start; gap: 0.5em;">
    <span>🌿</span> <span>Branching and pull requests</span>
  </li>
  <li style="display: flex; align-items: start; gap: 0.5em;">
    <span>🤝</span> <span>Collaborating in real-world projects</span>
  </li>
  <li style="display: flex; align-items: start; gap: 0.5em;">
    <span>⚔️</span> <span>Handling merge conflicts</span>
  </li>
  <li style="display: flex; align-items: start; gap: 0.5em;">
    <span>🔄</span> <span>Continuous integration (e.g., GitHub Actions)</span>
  </li>
  <li style="display: flex; align-items: start; gap: 0.5em;">
    <span>🧪</span> <span>Automated testing</span>
  </li>
</ul>

## {.center}

::: {.r-fit-text}
[happygitwithr.com](https://happygitwithr.com)
:::

![](images/diff-rebase.png){fig-align="center"}

::: {.r-fit-text}
<https://docs.posit.co/ide/user/ide/guide/tools/version-control.html>
:::

# 📦<br><br>Environment control{background-color="#3a488c"}

##

![](images/comic.png){fig-align="center"}

## Your entire environment should be easily reproducible

We need a way of capturing the state of your computing environment,
such that you or others can recreate it later.

* Software (e.g., R, Python, command line tools)
* R packages
* Operating system

## How?

1. Report session information in your scripts:
   ```{r}
   #| eval: false
   sessionInfo()
   sessioninfo::session_info()
   ```

2. Set a seed:
   ```{r}
   #| eval: false
   set.seed(42)
   ```

3. Use a dated CRAN repository:
   ```{r}
   #| eval: false
   options(repos = c(
     CRAN = "packagemanager.posit.co/cran/2025-07-25"
   ))
   ```

4. Use [`pak`](https://pak.r-lib.org) or
   [`renv`](https://rstudio.github.io/renv/) to control package versions.

## Use a dated CRAN repository {.center}

![](images/ppm.png){fig-width="100%" fig-align="center"}

::: {.center-h}
<https://packagemanager.posit.co/client/#/repos/cran/setup>
:::

## {.center}

![](images/set-repo.png){fig-align="center"}


## `renv`

`renv` is an R package to manage and reproduce the exact package versions used
in a project.

![](images/renv.png){fig-align="center" style="padding-top: 1.5rem;"}

## Setting up `renv`

`renv` is an R package. So first, **install** the package (once):

```{r}
#| eval: false
install.packages("renv")
```

::: {.fragment}

Then, from the top-level directory, **initialise** the project:

```{r}
#| eval: false
renv::init()
```

:::

::: {.fragment}

**Install** the required packages:
```{r}
#| eval: false
renv::install()             # All required packages
renv::install("tidyverse")  # A specific package
```

:::

---

**Save** the current state:
```{r}
#| eval: false
renv::snapshot()
```
<br>
Then **share** `renv.lock` with collaborator (via Git).

## Restoring from a `renv` lockfile

When re-initialising a project (e.g., on a new computer, or as a collaborator):

```{r}
#| eval: false
#| echo: true
renv::restore()
```

* Compares the lockfile to the current project library.
* Installs any missing or mismatched packages.

## {.center}

::: {.r-fit-text}
R packages are just one part of<br>your computing environment.
:::

## {.center background-color="black"}

![](images/deeper.png)


## Containers {.center}

Containers package your entire computing environment so it runs
consistently everywhere.


![](images/box.png){fig-align="center" width="50%" style="padding:1rem;"}

This typically involves [Docker](https://en.wikipedia.org/wiki/Docker_(software)) or [Singularity](https://docs.sylabs.io/guides/3.5/user-guide/introduction.html).

---

## {.center}

```{=html}
  <style>
    .wrapper {
      width: 70%;
      margin: 0 auto;
    }

    .label {
      font-weight: 600;
      font-size: 3rem;
      margin-bottom: 0.5rem;
    }

    .outer {
      border: 10px solid #669bbc;
      padding: 2rem;
    }

    .middle {
      border: 10px solid #3a488c;
      padding: 2rem;
      margin-top: 1rem;
    }

    .inner {
      border: 10px solid #780000;
      padding: 1rem;
      text-align: center;
      margin-top: 1rem;
      font-size: 3rem;
      font-weight: 600;
    }
  </style>
</head>
<body>

  <div class="wrapper">
    <div class="label">Your computer</div>
    <div class="outer">
      <div class="label">Docker</div>
      <div class="middle">
        <div class="inner">
          A container
        </div>
      </div>
    </div>
  </div>
```

## Where do containers come from?

:::: {.columns}

::: {.column width="60%"}

1. Build them yourself.
2. Download a container made by someone else.

:::

::: {.column width="40%"}
![](images/stork.png)
:::

::::

## {.center}

::: {.center-h}
[https://rocker-project.org](https://rocker-project.org)
:::

![](images/rocker.png){fig-align="center"}

## Docker example

![](images/docker.gif){fig-align="center"}

# 🤖<br><br>Workflow automation {background-color="#3a488c"}

## {.center}

![](images/button.png){fig-align="center"}

## Level 1: `source()`

Create a script that runs your other scripts:

```{r filename="run.R"}
#| eval: false
source("01-cleaning.R")
source("02-analysis.R")
source("03-plots.R")
```

* A good start that supports basic automation.
* Simplistic; runs everything unconditionally, no awareness of dependencies, scales poorly.

## Level 2: Make

[Make](https://www.gnu.org/software/make/) is a tool that runs only the parts
of your code that need updating, based on what's changed.

:::{.fragment style="margin-top: 1rem;"}
```{bash, filename="Makefile"}
#| eval: false
clean.csv: raw.csv cleaning.R # <1>
	Rscript cleaning.R

plot.png: clean.csv analysis.R  # <2>
	Rscript analysis.R
```
1. Declares target (`clean.csv`) with dependencies (`raw.csv`, `cleaning.R`). If either change, the code is run.
2. Declares another target (`plot.png`), with two dependencies (`clean.csv`, `analysis.R`).
:::

##

Once you've defined your Makefile, you can then run:

```bash
make plot.png
```

to re-run all necessary preceding steps.

<div style="
border: 3px solid #ccc;
padding: 1.5rem;
padding-bottom: 0.5rem;
border-radius: 10px;
background-color: #f9f9f9;
margin-top: 5rem;
padding-left: 3rem;
font-size: 2rem;
">

<h3>To learn more:</h3>

* <https://byronjsmith.com/make-bml>
* <https://tilburgsciencehub.com/topics/automation/automation-tools/make-and-makefiles/>

</div>

## Level 3: `targets` {.center}

* [`targets`](https://docs.ropensci.org/targets/) is an R package for building reproducible workflows by tracking and running R *functions* instead of files.

* Like Make, but it works at the level of R objects and code, not just scripts and outputs.

:::{.center-h}
<https://docs.ropensci.org/targets/>
:::

---

![](images/targets-network.png){fig-align="center"}

##

![](images/targets-manual.png)

:::{.center-h}
<https://books.ropensci.org/targets/>
:::

---

{{< video https://vimeo.com/700982360 width="100%" height="100%" >}}

## Use Quarto to automate reporting

![](images/quarto.png){fig-align="center"}

##

![](images/quarto-website.png){fig-align="center"}

::: {.center-h}
<https://quarto.org>
:::

# Wrapping up {background-color="#3a488c" .center}

<br><br>
![](images/stewie.gif)


## Phew, that was a lot.

<ul style="list-style: none; padding-left: 0;">
  <li style="display: flex; align-items: start; gap: 0.5em;">
    <span>🌱</span> <span>Start small, build incrementally.</span>
  </li>
  <li style="display: flex; align-items: start; gap: 0.5em;">
    <span>🤝</span> <span>Talk to colleagues about how they organise their code; establish shared practices.</span>
  </li>
  <li style="display: flex; align-items: start; gap: 0.5em;">
    <span>🌀</span> <span>Use version control early — it saves time (and headaches) later.</span>
  </li>
  <li style="display: flex; align-items: start; gap: 0.5em;">
    <span>🧠</span> <span>Tools help — but culture and communication are key.</span>
  </li>
</ul>

---

If you read one thing...

<div style="border: 6px solid #999; background: #f9f9f9; padding: 1rem; font-family: Optima, Georgia, serif; font-size: 2.2rem; line-height: 1.5; margin: 1rem; margin-top: 2rem; padding: 2rem; padding-top: 1.5rem">
<div style="font-size: 3rem; padding-bottom: 0.5rem;">**Comprehensibility of research**</div>

  This is not transparency nor openness. What I mean is research has sufficient documentation and justification to reduce error and empower others to make up their own minds about its value. **Research should be intelligible**. Access is not sufficient. Research can be replicable without being reasonable or correct. Materials and data can be open without being intelligible, and they can be partly closed while still being comprehensible.
</div>

:::{.r-fit-text}
[elevanth.org/blog/2025/07/09/which-kind-of-science-reform](https://elevanth.org/blog/2025/07/09/which-kind-of-science-reform)
:::


## {.center}

:::{.center-h style="font-size: 4rem; font-weight:800;"}
Thank you for listening.
:::

![](images/qr.png){fig-align="center"}

:::{.center-h}
*Slides and practical materials*
:::

## {.center}

![](images/pigs.png)
