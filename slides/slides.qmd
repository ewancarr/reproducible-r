---
title: Reproducible workflows in R
subtitle: King's Open Research Summer School
author:
  - name: Dr Ewan Carr
    orcid: 0000-0002-1146-4922
    affiliation:
      - name: Department of Biostatistics & Health Informatics<br>King‚Äôs College London
        city: King‚Äôs College London
date: 2025-07-25
date-format: "long"
from: markdown+emoji
format:
  revealjs:
    theme: [simple, theme.scss]
    css: theme.css
    highlight-style: atom-one
    code-line-numbers: false
    echo: true
    output-file: index.html
---

## üñºÔ∏è

* My aim is to surface key tools and habits ‚Äî you‚Äôll need to explore further on
  your own.

* Reproducibility is *necessary* for open science, but not *sufficient*.
  Broader change in motivations, incentives, and culture is essential.

<div style="border: 3px solid #ccc; padding: 0.5em; border-radius: 10px; background-color: #f9f9f9; margin-top: 1em; padding-left: 1em; font-size: 2rem;">

  * Reset academic publishing models.
  * Reward high quality team science regardless of null findings.
  * Stop chasing small, noisy effects in tiny samples.

</div>

## {.center}

<div style="font-size: 4.2rem; padding-left: 0.5em; padding-bottom: 2em;">
"Research can be **open** and **reproducible** and still completely and obviously **wrong**."
</div>

<div style="font-size: 3rem; padding-bottom: 0.2em;">
*Richard McElreath*
</div>

<div style="font-size: 2rem;">
[https://elevanth.org/blog/2025/07/09/which-kind-of-science-reform](https://elevanth.org/blog/2025/07/09/which-kind-of-science-reform)
</div>

##

![](images/maslow-comic-1.png){fig-align="center"}


##

![](images/maslow-comic-2.png){fig-align="center"}

## This talk


:::: {.columns}

::: {.column width="3%"}
:::
::: {.column width="60%"}
1. Code and data hygiene
2. Version control with Git
3. Managing your environment
4. Workflow automation
5. Wrap-up
:::

::: {.column width="37%"}

![](images/signpost.png){fig-align="right" width="80%"}
:::

::::

## {.center}

:::{.r-stack}
I'm assuming you know R.
:::

# ü´£<br><br>Not doing horrible things with your data or code {background-color="#003049"}

## üßº Data hygiene

:::{style="margin-left: 1.5em;"}

1. Keep raw and processed separate
2. Never edit raw data; automate instead.
   - Avoid `final_final_v3.csv`
3. Set raw data as read only
4. Version your data
   - e.g., `data/raw/YYYY-MM-DD`
5. Back up regularly; test your backups.

:::

## üóÇÔ∏è Use a consistent project layout {.center .smaller}

:::: {.columns}

::: {.column width="55%" style="font-size: 3rem; padding-left: 2rem;"}
```
data
  raw
  clean
1-cleaning
2-analysis
  a-descriptives
  b-models
  c-processing
3-figures
4-writing
README.txt
```
:::

::: {.column width="45%"}
![](images/github-structure.png){width="80%"}
:::

::::


[`https://cookiecutter-data-science.drivendata.org`](https://cookiecutter-data-science.drivendata.org)

## üîó Use relative file paths {.center}

## {.center}

::: {.r-fit-text}
`setwd()` is banned
:::

## {.center}

:::{.r-fit-text}
Absolute file paths are brittle.

Relative file paths are portable.
:::

:::{.r-fit-text}
Use the [here](https://here.r-lib.org/index.html) package to construct
**relative** paths.
:::

## {.center}

<div style="border: 2px solid #ccc; padding: 1em; border-radius: 8px; background-color: #f9f9f9; padding-top: 0.5em;">

Set a project root (i.e., a top-level directory) from:

* An RStudio project
* A Git repository
* Manually (with a `.here` file)

Then, construct **relative paths** with `here()`:

```{r}
#| eval: false
#| echo: true
library(here)
data <- read_csv(
  here("data", "raw", "messy-data.csv")
)
```
</div>

## {.center}

![](images/rstudio-projects.png){fig-align="center"}


## üßπ Write clean, organised code

* Write **modular code**; break tasks into functions or scripts (e.g., scripts cleaning, analysis, visualisation).

* Follow a **style guide**^[https://style.tidyverse.org/] and use a **code formatter**^[https://posit-dev.github.io/air/].

* Document with inline comments and `README.md` files.

* Use consistent file and variable naming conventions (e.g., `snake_case`).

## The Air code formatter^[[https://posit-dev.github.io/air/](https://posit-dev.github.io/air/)] {.center}

![](images/air.gif){fig-align="center" width="60%" style="padding-bottom:1em;"}

# üîÅ<br><br>Version control{background-color="#003049"}

##

:::{.r-fit-text}
Use git.
:::

## How does it work?

Initialise the repository:
```{.bash}
git init
git add README.md cleaning.R
git commit -m "Initial commit"
```

<br>
Then go to [GitHub](https://github.com), create a new repository and
connect the remote repository to your local one:

```{.bash}
git remote add origin \
  https://github.com/your-username/your-repo.git
```

##

Push your changes to GitHub
```{.bash}
git push origin main
```

<br>
Then, repeat:

```{.bash style="padding-left: 10px; margin-bottom: 15px;"}
git add . # <1>
git commit -m "Describe your changes" # <2>
git push # <3>
```
1. Add recent changes
2. 'Commit' them to the local repository
3. 'Push' them to GitHub

## {background-color="#1a1c1a"}

![](images/gource.gif)

## Getting started

1. Create an account on [GitHub.com](https://github.com)

2. Download [GitHub Desktop](https://desktop.github.com/download/)

3. Add some files. Press buttons, break things.

![](images/papers.gif)

## {.center}

:::{.r-fit-text}
KEEP BACKUPS.
:::

## Include a `README.md` file

A good `README.md` helps others (and your future self) understand your project.

- **Purpose** What and who is the project for?

- **Structure** Describe the folder structure and key files.

- **How to run** Step-by-step instructions, including:
  - Dependencies (e.g., R packages)
  - How to run the main script or report
  - Expected outputs

## {.center}

<https://github.com/ewancarr/NEWS2-COVID-19>

::: {.r-fit-width}
![](images/readme.png)
:::

## What to learn next?

* Using `.gitignore` effectively
* Writing good commit messages
* Branching and pull requests
* Collaborating in real-world projects
* Handling merge conflicts
* Continuous integration (e.g., GitHub Actions)
* Automated testing

## Further reading

* https://happygitwithr.com
* https://docs.posit.co/ide/user/ide/guide/tools/version-control.html
* [Excuse Me, Do You Have a Moment to Talk About Version Control?](https://www.tandfonline.com/doi/abs/10.1080/00031305.2017.1399928)


# üì¶<br><br>Environment control{background-color="#003049"}

##

![](images/comic.png){fig-align="center"}

## Your entire environment should be (easily) repoducible.

> You need a way of capturing the state of your computing environment,
> such that you or others can recreate it later.

* Computing environment
* Software (e.g., R, Python, command line tools, etc.)
* R packages
* Scripts

## How?

- Report `sessionInfo()`
  or `sessioninfo::session_info()`

- Set a seed
  (`set.seed(123)`)

- Use a dated CRAN repo
  e.g., `options(repos = c(CRAN = "https://packagemanager.posit.co/cran/2025-07-25"))`

- Use `pak` or `renv` to control package versions

## Posit Package Manager {.center}

![](images/ppm.png){fig-width="100%" fig-align="center"}

::: {.center-h}
<https://packagemanager.posit.co>
:::

## {.center}

![](images/set-repo.png){fig-align="center"}


## `renv`

`renv` helps manage and reproduce the exact package versions used in a project.

![](images/renv.png){fig-align="center"}

## Setting up `renv`

`renv` is an R package. So first, [install]{.alert} the package (once):

```{r}
#| eval: false
install.packages("renv")
```

Then, from the top-level directory, [initialise]{.alert} the project:

```{r}
#| eval: false
renv::init()
```

Install packages:
```{r}
#| eval: false
renv::install()             # All required packages
renv::install("tidyverse")  # A specific package
```

---

Save the current state:
```{r}
#| eval: false
renv::snapshot()
```
<br>
Then share `renv.lock` with collaborator (via Git).

## Restoring from a `renv` lockfile

When re-initialising a project (e.g., on a new computer, or as a collaborator):

```{r}
#| eval: false
#| echo: true
renv::restore()
```

* Compares the lockfile to the current project library
* Installs any missing or mismatched packages

## {.center}

::: {.center-h}
R packages are just one part of<br>your computing environment.
:::

## {.center background-color="black"}

![](images/deeper.png)


## Containers {.center}


Containers package your entire computing environment so it runs
consistently everywhere.

![](images/box.png){fig-align="center"}

---

This typically involves [Docker](https://en.wikipedia.org/wiki/Docker_(software)) or [Singularity](https://docs.sylabs.io/guides/3.5/user-guide/introduction.html)^[Especially if using a HPC like CREATE.]

## How does it work? {.center}

```{=html}
  <style>
    .wrapper {
      width: 70%;
      margin: 0 auto;
    }

    .label {
      font-weight: 600;
      font-size: 3rem;
      margin-bottom: 0.5rem;
    }

    .outer {
      border: 10px solid #669bbc;
      padding: 2rem;
    }

    .middle {
      border: 10px solid #003049;
      padding: 2rem;
      margin-top: 1rem;
    }

    .inner {
      border: 10px solid #780000;
      padding: 1rem;
      text-align: center;
      margin-top: 1rem;
      font-size: 3rem;
      font-weight: 600;
    }
  </style>
</head>
<body>

  <div class="wrapper">
    <div class="label">Your computer</div>
    <div class="outer">
      <div class="label">Docker</div>
      <div class="middle">
        <div class="inner">
          A container
        </div>
      </div>
    </div>
  </div>
```

## Where do containers come from?

1. Build them yourself.
2. Download one made by someone else.

---

::: {.center-h}
[https://rocker-project.org](https://rocker-project.org)
:::

<br>

![](images/rocker.png){fig-align="center"}


## Docker example

![](images/docker.gif)

## Singularity example






# ü§ñ<br><br>Workflow automation {background-color="#003049"}

## Use Quarto

- Combine code, outputs, and narrative
- Export to PDF, Word, or HTML
- Supports parameterised reports

<https://quarto.org>



## Automate your scripts

### Goal: run a full analysis from **raw data ‚Üí results** with a single command

![](images/button.png)

## Level 1: `source()`

- Use `source("scripts/01_clean.R")`
- Chain scripts using numbered filenames
  e.g., `01_clean.R ‚Üí 02_analysis.R ‚Üí 03_plot.R`
- **Limitations**: manual, fragile, hard to scale

## Level 2: Make

Simple `Makefile` to define dependencies
Automates re-running only what‚Äôs changed

```make
# Makefile for automating R scripts

all: results/summary.csv figures/plot.png

# Data cleaning step
data/clean.csv: scripts/01_clean.R data/raw.csv
	Rscript scripts/01_clean.R

# Analysis step
results/summary.csv: scripts/02_analyse.R data/clean.csv
	Rscript scripts/02_analyse.R

# Plotting step
figures/plot.png: scripts/03_plot.R results/summary.csv
	Rscript scripts/03_plot.R

# Optional: clean everything
clean:
	rm -f data/clean.csv results/summary.csv figures/plot.png
```

```bash
# Run the full pipeline (build all outputs)
make

# Just run the analysis step (and its dependencies)
make results/summary.csv

# Clean all generated outputs
make clean
```


# Level 3: {targets}

	‚Ä¢	R-native pipeline toolkit
	‚Ä¢	Define steps + dependencies using functions
	‚Ä¢	Skips up-to-date steps via caching
	‚Ä¢	Visualise the pipeline:

![](images/targets.png)


## Goal: Run a full analysis from raw data ‚Üí result with a single command

Start with simple methods:
Use source("scripts/01_clean.R")
Script chaining with numbered files
Limitations: manual, fragile

Then introduce a simple Make file

Then: introduce {targets}
Define steps and dependencies
Auto-skips steps with cached results
Visualise pipeline with tar_visnetwork()


# Wrapping up {background-color="#003049"}

![](images/stewie.gif)

## Tools won't  solve


* Start small, build incrementally.

##

Comprehensibility of research. This is not transparency nor openness. What I mean is research has sufficient documentation and justification to reduce error and empower others to make up their own minds about its value. Research should be intelligible. Access is not sufficient. Research can be replicable without being reasonable or correct. Materials and data can be open without being intelligible, and they can be partly closed while still being comprehensible.
