---
title: Reproducible workflows in R
subtitle: "Practical"
author:
  - name: Dr Ewan Carr
    orcid: 0000-0002-1146-4922
    email: ewan.carr@kcl.ac.uk
    affiliation:
      - name: Department of Biostatistics & Health Informatics<br>King‚Äôs College London
        city: King‚Äôs College London
date: 2025-07-25
format:
  html:
    theme:
      light: flatly
      dark: darkly
    output-file: index.html
    toc: true
    number-sections: true
    embed-resources: true
    link-external-newwindow: true
---

<div style="
  background-color: #fdf0d5;
  border-left: 6px solid #780000;
  padding-top: 0.01rem;
  padding-left: 2rem;
  padding-right: 2rem;
  margin: 0rem;
  box-shadow: 0 8px 8px rgba(0,0,0,0.15);
">

# Welcome {.unnumbered}

This practical will bring together the steps covered in the lecture by:

1. Building a reproducible R pipeline
2. Committing your project to GitHub
3. Restoring it from GitHub

With the **Women's EURO 2025** final approaching this weekend, we'll build a
reproducible pipeline to predict England's chance of winning the final
against Spain, using information on their performance over the past year.

You will:

* Build models to predict England's chance of winning their next match.
* Simulate the likely outcome of the final.
* Use `here` for file paths and `renv` to lock package versions.
* Create a Git repository, version your code with git, and push it to GitHub.
* Make the project fully reproducible and shareable.

![](images/euros.png){fig-align="center"}

</div>

# Setup {.unnumbered}

## Software  {.unnumbered}

To complete this practical, you'll need:

* R (‚â• 4.3)
* RStudio
* Git, used for version control; or
* [GitHub Desktop](https://github.com/apps/desktop), a user-friendly way to interact with Git and GitHub.

GitHub Desktop includes Git, so you don't need to install Git separately
if you use it. However, we recommend installing Git directly to ensure
compatibility with RStudio's Git features.

::: {.callout-warning icon="false" title="<span style='margin-right: 0.5em;'>üí°</span>If you're new to the command line, use GitHub Desktop"}

[GitHub Desktop](https://github.com/apps/desktop) provides a simple interface for common tasks like committing, pushing, and pulling code ‚Äî no terminal required. It‚Äôs a good starting point if you‚Äôre unfamiliar with the command line.

:::

## Installing Git {.unnumbered}

::: {.panel-tabset}

## macOS

Git is often pre-installed on macOS. You can check by typing in the terminal:

```bash
git --version
```

If it's not installed, run:

```bash
xcode-select --install
```

You can optionally install GitHub Desktop, a graphical interface for Git and
GitHub, by following the [instructions here](https://desktop.github.com).

## Windows

You can download Git for Windows from <https://git-scm.com>. Run the
installer and accept default options, in particular:

> *"Use Git from the command line and also from 3rd-party software"*

You can optionally install GitHub Desktop, a graphical interface for Git and
GitHub, by following the [instructions here](https://desktop.github.com).

:::

## Authenticating with GitHub {.unnumbered}

<p style="padding-top: 1rem;">
To push and pull from GitHub, you need to authenticate. There are two options:
</p>

::: {.panel-tabset}

## SSH keys

- Recommended for longer-term use.
- Requires access to a command line.

1. Generate a key (if you don‚Äôt have one):

   ```bash
   ssh-keygen -t ed25519 -C "your_email@example.com"
   ```

2. Copy the key to your clipboard

::: {.panel-tabset}

## macOS
```bash
pbcopy < ~/.ssh/id_ed25519.pub
```

## Windows using Git Bash
```bash
cat ~/.ssh/id_ed25519.pub | clip
```

:::

3. Add it to GitHub:
- Go to [GitHub ‚Üí Settings ‚Üí SSH and GPG keys](https://github.com/settings/keys).
- Click <kbd>New SSH key</kbd> and paste your generated key.

See [these instructions](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account?platform=windows) if you get stuck.

## GitHub Desktop

- A good place to start if you're new to Git.
- When you first log in via GitHub Desktop, it stores a token securely.
- You can clone, commit, push, and pull without dealing with passwords or keys.

![](images/github-auth.png)

:::

# Create a project in RStudio

Create a new RStudio Project and give it an appropriate name (e.g., `euros-prediction`):

> <kbd>File</kbd> ‚Üí <kbd>New Project</kbd> ‚Üí <kbd>New Directory</kbd>

# Download the scripts and datasets

Right click the links below to download the required scripts and
dataset:

* [`01-clean.R`][clean]
* [`02-analysis.R`][analysis]
* [`03-plot.R`][plot]
* [`fixtures.csv`][fixtures]

Put these inside your project folder and recreate the structure shown below:

[clean]: https://github.com/ewancarr/reproducible-r/raw/practical/2-scripts/01-clean.R
[analysis]: https://github.com/ewancarr/reproducible-r/raw/refs/heads/main/practical/2-scripts/02-analysis.R
[plot]: https://github.com/ewancarr/reproducible-r/raw/refs/heads/main/practical/2-scripts/03-plot.R
[fixtures]: https://raw.githubusercontent.com/ewancarr/reproducible-r/refs/heads/main/practical/1-data/raw/fixtures.csv

```{default style="padding-left:4rem; font-size: 1.2rem;"}
1-data/
‚îú‚îÄ‚îÄ raw/
‚îÇ   ‚îî‚îÄ‚îÄ fixtures.csv
‚îî‚îÄ‚îÄ clean/
2-scripts/
‚îú‚îÄ‚îÄ 01-clean.R
‚îú‚îÄ‚îÄ 02-analysis.R
‚îî‚îÄ‚îÄ 03-plot.R
outputs/
```

# Initialise `renv` and install the required packages

In the R console, type:

```{r}
#| eval: false
install.packages("renv") # <1>
renv::init() # <2>
renv::install() # <3>
renv::snapshot() # <4>
```
1. Install the `renv` package. You only need to do this once---not for each project.
2. Initialise `renv` for the current project.
3. Install packages required for this project.
4. Save the current state into `renv.lock`.

Open the `renv.lock` lockfile to understand its contents.

# Run the three scripts

Once packages are installed and `renv`  is initialised, you're ready to run the
analysis.

::: {.panel-tabset}

## Import and clean data

Run `01-clean.R` in RStudio. This script:

1. Imports the `fixtures.csv` dataset from the `1-data/raw` folder.
2. Performs data cleaning, adding venue, Elo ratings, rest days, and form.
3. Saves a cleaned dataset to `1-data/clean/fixtures.rds`.

## Predict the next match

Run `02-analysis.R` in RStudio. This script:

1. Fits two Poisson regression models to predict:
   - England's goals
   - Opponent‚Äôs goals
2. Simulates 1000 match results
3. Saves the probabilities to `outputs/results.rds`

## Visualise

Run `03-plot.R` in RStudio. This script:

1. Loads the saved probabilities (`outputs/results.rds`).
2. Creates a bar chart of predicted win/draw/loss.
3. Saves the figure to `outputs/prediction_plot.png`.

:::

# Putting it all together

Create a new script `run.R` at the project root with the contents:

```{r filename="run.R"}
#| eval: false
library(here)
source(here("2-scripts", "01-clean.R"))
source(here("2-scripts", "02-analysis.R"))
source(here("2-scripts", "03-plot.R"))
```

This script uses [`source`][source] to run the three scripts sequentially,
avoiding the need to run them separately.

[source]: https://stat.ethz.ch/R-manual/R-devel/library/base/html/source.html

Run the `run.R` script either by clicking <kbd>Run</kbd> or by typing at the console:

```r
source("run.R")
```

# Initialise the Git repository

We've now set up our project, initialised `renv`, and created a `run.R`
script that automates our data cleaning and analysis.

In this section, we'll initialise a new, empty Git repository. Git will
allow us to track changes to our files over time and restore previous
versions.

You can complete this section via the terminal or using a desktop application, such as [GitHub Desktop](https://desktop.github.com/download/).

::: {.panel-tabset}

## Terminal

Open a terminal in the project root and type:

```bash
git init
```

* You can do this from within RStudio in the 'Terminal' pane.
* If you haven't yet installed Git, see the instructions above.

## GitHub Desktop

1. Open GitHub Desktop.
2. Go to <kbd>File</kbd> ‚Üí <kbd>Add Local Repository‚Ä¶</kbd>.
3. Click <kbd>Choose‚Ä¶</kbd> and select your existing project folder.
4. You should see the prompt:

  > The directory does not appear to be a Git repository. Would you like to
  > create a repository here instead?‚Äù

5. Click "Create Repository".

:::

# Commit files to the local repository

Having initialised the empty repository, we now need to add our files.

::: {.panel-tabset}

## Terminal

```bash
git add 1-data/* # <1>
git add 2-scripts/* # <2>
git add run.R # <3>
git add renv.lock # <4>
git add euros-prediction.Rproj # <5>
git commit -m "Initial commit" # <6>
```
1. Add all files in the '1-data' folder.
2. Add all files in the '2-scripts' folder.
3. Add the `run.R` script.
4. Add the `renv.lock` lockfile.
5. Add your RStudio Project file; change the name as appropriate.
6. Commit the new files with a short message (specified by `-m`)

## GitHub Desktop

1. Open **GitHub Desktop** and select your repository.

2. In the **Changes** tab, tick the checkboxes to stage the following:
   - All files in the `1-data/` folder
   - All files in the `2-scripts/` folder
   - The `run.R` file
   - The `renv.lock` file

3. At the bottom left, enter a commit message:
   `Initial commit`

4. Click **Commit to main**.

:::

# Create an empty repository on GitHub

1. If you haven't already, create an account on
   [GitHub.com](https://github.com).

2. Then, go to <https://github.com/new> and create a new, empty repository with
   an appropriate name (e.g., `euros-prediction`)

# Connect our local repository to GitHub

We then need to connect your local repository with one you just created on
GitHub.

::: {.panel-tabset}

## Terminal

In the terminal, you can do this by typing:

```bash
git remote add origin git@github.com:username/repo.git # <1>
git push origin main # <2>
```
1. Set the `remote` to point to the new repository on Github. You will need to replace the URL with the corresponding URL for your repository.
2. 'Push' the local history to GitHub.

## GitHub Desktop

1. On GitHub.com, create a new (empty) repository.

2. In **GitHub Desktop**, go to <kbd>Repository</kbd> ‚Üí <kbd>Repository Settings...</kbd>

3. Under **Remote**, click <kbd>Add</kbd> and enter:
   - **Name**: `origin`
   - **URL**: `git@github.com:username/repo.git`
     (Replace with the URL of your new repository)

4. Click <kbd>Save</kbd>.

5. Back in the main window, click **Push origin** (top bar) to upload your commits to GitHub.

:::

# Reproducing your analysis from GitHub

We'll now test that we can recreate our analysis from the online repository.
This ensures your project can be reliably re-run on another computer or by
another user.

The steps involved are:

1. 'Clone' the existing repository from GitHub.
2. Restore the `renv` environment.
3. Run the `run.R` script to repeat the analysis.

::: {.panel-tabset}

## Terminal

In the terminal:

```bash
git clone https://github.com/username/your-repo.git # <1>
```
1. 'Clone' the repository on GitHub to a local folder. Replace `username` and
   `your-repo` as appropriate.

Then open the RStudio Project, and at the R console:

```r
renv::restore()
source("run.R")
```

## GitHub Desktop

1. <kbd>File</kbd> ‚Üí <kbd>Clone Repository‚Ä¶</kbd>
2. Choose your repository.

Then open the RStudio Project, and at the R console:

```r
renv::restore()
source("run.R")
```

:::

# Adding a 'README' file

1. Write a `README.md`^[Read [this](https://www.makeareadme.com) if you're not
   sure how to start.] file in your project folder. Briefly describe the
   analysis and steps needed to reproduce.
2. Add and commit this file to your local repository.
3. Push the changes to GitHub.

Once pushed, you can view the `README.md` on your repository page on GitHub.
